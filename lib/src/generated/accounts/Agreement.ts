/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Guarantor, guarantorBeet } from '../types/Guarantor'

/**
 * Arguments used to create {@link Agreement}
 * @category Accounts
 * @category generated
 */
export type AgreementArgs = {
  version: number
  guarantorCount: number
  guarantors: Guarantor[]
  title: string
  content: string
}

export const agreementDiscriminator = [83, 212, 5, 110, 225, 249, 197, 84]
/**
 * Holds the data for the {@link Agreement} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Agreement implements AgreementArgs {
  private constructor(
    readonly version: number,
    readonly guarantorCount: number,
    readonly guarantors: Guarantor[],
    readonly title: string,
    readonly content: string
  ) {}

  /**
   * Creates a {@link Agreement} instance from the provided args.
   */
  static fromArgs(args: AgreementArgs) {
    return new Agreement(
      args.version,
      args.guarantorCount,
      args.guarantors,
      args.title,
      args.content
    )
  }

  /**
   * Deserializes the {@link Agreement} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Agreement, number] {
    return Agreement.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Agreement} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Agreement> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Agreement account at ${address}`)
    }
    return Agreement.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'AzST5p5ATAN1ABdwWXzV7Z8667b3qqA1JUz9w7eWE6Dt'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, agreementBeet)
  }

  /**
   * Deserializes the {@link Agreement} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Agreement, number] {
    return agreementBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Agreement} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return agreementBeet.serialize({
      accountDiscriminator: agreementDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Agreement} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AgreementArgs) {
    const instance = Agreement.fromArgs(args)
    return agreementBeet.toFixedFromValue({
      accountDiscriminator: agreementDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Agreement} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AgreementArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Agreement.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Agreement} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: this.version,
      guarantorCount: this.guarantorCount,
      guarantors: this.guarantors,
      title: this.title,
      content: this.content,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const agreementBeet = new beet.FixableBeetStruct<
  Agreement,
  AgreementArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u8],
    ['guarantorCount', beet.u8],
    ['guarantors', beet.array(guarantorBeet)],
    ['title', beet.utf8String],
    ['content', beet.utf8String],
  ],
  Agreement.fromArgs,
  'Agreement'
)
