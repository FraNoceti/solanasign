/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UpdateAgreementArgs,
  updateAgreementArgsBeet,
} from '../types/UpdateAgreementArgs'

/**
 * @category Instructions
 * @category UpdateAgreement
 * @category generated
 */
export type UpdateAgreementInstructionArgs = {
  args: UpdateAgreementArgs
}
/**
 * @category Instructions
 * @category UpdateAgreement
 * @category generated
 */
export const updateAgreementStruct = new beet.FixableBeetArgsStruct<
  UpdateAgreementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', updateAgreementArgsBeet],
  ],
  'UpdateAgreementInstructionArgs'
)
/**
 * Accounts required by the _updateAgreement_ instruction
 *
 * @property [_writable_] agreement
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category UpdateAgreement
 * @category generated
 */
export type UpdateAgreementInstructionAccounts = {
  agreement: web3.PublicKey
  payer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateAgreementInstructionDiscriminator = [
  231, 59, 90, 24, 226, 213, 155, 54,
]

/**
 * Creates a _UpdateAgreement_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateAgreement
 * @category generated
 */
export function createUpdateAgreementInstruction(
  accounts: UpdateAgreementInstructionAccounts,
  args: UpdateAgreementInstructionArgs,
  programId = new web3.PublicKey('AzST5p5ATAN1ABdwWXzV7Z8667b3qqA1JUz9w7eWE6Dt')
) {
  const [data] = updateAgreementStruct.serialize({
    instructionDiscriminator: updateAgreementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.agreement,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
