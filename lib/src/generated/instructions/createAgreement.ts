/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateAgreementArgs,
  createAgreementArgsBeet,
} from '../types/CreateAgreementArgs'

/**
 * @category Instructions
 * @category CreateAgreement
 * @category generated
 */
export type CreateAgreementInstructionArgs = {
  args: CreateAgreementArgs
}
/**
 * @category Instructions
 * @category CreateAgreement
 * @category generated
 */
export const createAgreementStruct = new beet.FixableBeetArgsStruct<
  CreateAgreementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createAgreementArgsBeet],
  ],
  'CreateAgreementInstructionArgs'
)
/**
 * Accounts required by the _createAgreement_ instruction
 *
 * @property [_writable_, **signer**] agreement
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateAgreement
 * @category generated
 */
export type CreateAgreementInstructionAccounts = {
  agreement: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAgreementInstructionDiscriminator = [
  220, 156, 65, 172, 252, 68, 74, 233,
]

/**
 * Creates a _CreateAgreement_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAgreement
 * @category generated
 */
export function createCreateAgreementInstruction(
  accounts: CreateAgreementInstructionAccounts,
  args: CreateAgreementInstructionArgs,
  programId = new web3.PublicKey('AzST5p5ATAN1ABdwWXzV7Z8667b3qqA1JUz9w7eWE6Dt')
) {
  const [data] = createAgreementStruct.serialize({
    instructionDiscriminator: createAgreementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.agreement,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
